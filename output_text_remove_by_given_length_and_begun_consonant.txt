{1. }{ }{if-then }{and }{if-then-else }{Statements
}{1.1. }{ }{if-then }{Statement
}{if-then }{statement }{is }{most }{basic }{of }{all }{control }{flow }{statements. }{It }{tells }{your }{program }{to }{execute }{a }{certain }{section }{of }{code }{only }{if }{a }{particular }{test }{evaluates }{to }{true. }{example, }{Bicycle }{class }{could }{allow }{brakes }{to }{decrease }{bicycle's }{speed }{only }{if }{bicycle }{is }{already }{in }{motion. }{One }{possible }{implementation }{of }{applyBrakes }{method }{could }{be }{as }{follows:
}{void }{applyBrakes() }{{
}{ }{ }{ }{ }{// }{"if" }{clause: }{bicycle }{must }{be }{moving
}{ }{ }{ }{ }{if }{(isMoving){
}{ }{ }{ }{ }{ }{ }{ }{ }{// }{"then" }{clause: }{decrease }{current }{speed
}{ }{ }{ }{ }{ }{ }{ }{ }{currentSpeed--;
}{ }{ }{ }{ }{}
}{}
}{If }{this }{test }{evaluates }{to }{false }{(meaning }{that }{bicycle }{is }{in }{motion), }{control }{jumps }{to }{end }{of }{if-then }{statement.}{
}{In }{addition, }{opening }{and }{closing }{braces }{are }{optional, }{provided }{that }{"then" }{clause }{contains }{only }{one }{statement:
}{void }{applyBrakes() }{{
}{ }{ }{ }{ }{// }{same }{as }{above, }{without }{braces
}{ }{ }{ }{ }{if }{(isMoving)
}{ }{ }{ }{ }{ }{ }{ }{ }{currentSpeed--;
}{}
}{Deciding }{when }{to }{omit }{braces }{is }{a }{matter }{of }{personal }{taste. }{Omitting }{them }{make }{code }{more }{brittle. }{If }{a }{second }{statement }{is }{later }{added }{to }{"then" }{clause, }{a }{common }{mistake }{would }{be }{forgetting }{to }{add }{newly }{required }{braces. }{compiler }{cannot }{catch }{this }{sort }{of }{error; }{you'll }{just }{wrong }{results.}{
}{1.2. }{ }{if-then-else }{Statement
}{if-then-else }{statement }{provides }{a }{secondary }{path }{of }{execution }{when }{an }{"if" }{clause }{evaluates }{to }{false. }{You }{could }{use }{an }{if-then-else }{statement }{in }{applyBrakes }{method }{to }{take }{some }{action }{if }{brakes }{are }{applied }{when }{bicycle }{is }{in }{motion. }{In }{this }{case, }{action }{is }{to }{simply }{print }{an }{error }{message }{stating }{that }{bicycle }{already }{stopped.}{
}{void }{applyBrakes() }{{
}{ }{ }{ }{ }{if }{(isMoving) }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{currentSpeed--;
}{ }{ }{ }{ }{} }{else }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{System.err.println("The }{bicycle }{already }{stopped!");
}{ }{ }{ }{ }{}
}{}
}{following }{program, }{IfElseDemo, }{assigns }{a }{grade }{based }{on }{value }{of }{a }{test }{score: }{an }{A }{a }{score }{of }{90% }{or }{above, }{a }{B }{a }{score }{of }{80% }{or }{above, }{and }{so }{on.}{
}{
}{class }{IfElseDemo }{{
}{ }{ }{ }{ }{public }{static }{void }{main(String[] }{args) }{{
}{
}{ }{ }{ }{ }{ }{ }{ }{ }{int }{testscore }{= }{76;
}{ }{ }{ }{ }{ }{ }{ }{ }{char }{grade;
}{
}{ }{ }{ }{ }{ }{ }{ }{ }{if }{(testscore }{>= }{90) }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{grade }{= }{'A';
}{ }{ }{ }{ }{ }{ }{ }{ }{} }{else }{if }{(testscore }{>= }{80) }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{grade }{= }{'B';
}{ }{ }{ }{ }{ }{ }{ }{ }{} }{else }{if }{(testscore }{>= }{70) }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{grade }{= }{'C';
}{ }{ }{ }{ }{ }{ }{ }{ }{} }{else }{if }{(testscore }{>= }{60) }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{grade }{= }{'D';
}{ }{ }{ }{ }{ }{ }{ }{ }{} }{else }{{
}{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{ }{grade }{= }{'F';
}{ }{ }{ }{ }{ }{ }{ }{ }{}
}{ }{ }{ }{ }{ }{ }{ }{ }{System.out.println("Grade }{= }{" }{+ }{grade);
}{ }{ }{ }{ }{}
}{}
}{output }{from }{program }{is:
}{ }{ }{ }{ }{Grade }{= }{C
}{You }{have }{noticed }{that }{value }{of }{testscore }{satisfy }{more }{than }{one }{expression }{in }{compound }{statement: }{76 }{>= }{70 }{and }{76 }{>= }{60. }{However, }{once }{a }{condition }{is }{satisfied, }{appropriate }{statements }{are }{executed }{(grade }{= }{'C';) }{and }{remaining }{conditions }{are }{evaluated.}